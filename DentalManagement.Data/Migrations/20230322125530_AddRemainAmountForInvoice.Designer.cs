// <auto-generated />
using System;
using DentalManagement.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DentalManagement.Data.Migrations
{
    [DbContext(typeof(DentalManagementDbContext))]
    [Migration("20230322125530_AddRemainAmountForInvoice")]
    partial class AddRemainAmountForInvoice
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DentalManagement.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "c8083a0b-ed5d-4abd-b5c6-5b54f4b1e5a9",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("DentalManagement.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89297097-e943-4b8d-8fa4-fd2009784722",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 769, DateTimeKind.Local).AddTicks(493),
                            Email = "nhakhoa.thuanviet@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "nhakhoa.thuanviet@gmail.com",
                            NormalizedUserName = "NHAKHOATHUANVIET",
                            PasswordHash = "AQAAAAEAACcQAAAAEMkWzqwYEuUDrcYC49XOYS8VrjlrGbrGTxhr0BN3syil8d/WOhfhP8C2HsT/8xxsyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "nhakhoathuanviet"
                        });
                });

            modelBuilder.Entity("DentalManagement.Data.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentBalance")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdentifyCard")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Khánh Hoà",
                            BirthDay = new DateTime(1997, 10, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7739),
                            CurrentBalance = 0m,
                            Description = "",
                            EmailAddress = "tientnguyen24@gmail.com",
                            FullName = "Nguyễn Trung Tiến",
                            Gender = 0,
                            IdentifyCard = "056097008352",
                            ModifiedBy = "",
                            PhoneNumber = "0327264465",
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            Address = "Khánh Hoà",
                            BirthDay = new DateTime(1997, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7742),
                            CurrentBalance = 0m,
                            Description = "",
                            EmailAddress = "thanhlamtran.32@gmail.com",
                            FullName = "Trần Thanh Lâm",
                            Gender = 0,
                            IdentifyCard = "056097008351",
                            ModifiedBy = "",
                            PhoneNumber = "0349616325",
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            Address = "Khánh Hoà",
                            BirthDay = new DateTime(2004, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7744),
                            CurrentBalance = 0m,
                            Description = "",
                            EmailAddress = "thuytrang160504@gmail.com",
                            FullName = "Nguyễn Thuỳ Trang",
                            Gender = 1,
                            IdentifyCard = "056097008353",
                            ModifiedBy = "",
                            PhoneNumber = "0346118102",
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            Address = "Khánh Hoà",
                            BirthDay = new DateTime(1991, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7746),
                            CurrentBalance = 0m,
                            Description = "",
                            EmailAddress = "luutrongtan1991@gmail.com",
                            FullName = "Lưu Trọng Tấn",
                            Gender = 0,
                            IdentifyCard = "056097008354",
                            ModifiedBy = "",
                            PhoneNumber = "0346113214",
                            Status = 0
                        });
                });

            modelBuilder.Entity("DentalManagement.Data.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("PrepaymentAmount")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RemainAmount")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscountAmount")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscountPercent")
                        .HasMaxLength(50)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalInvoiceAmount")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("DentalManagement.Data.Entities.InvoiceDetail", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ItemAmount")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ItemDiscountAmount")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ItemDiscountPercent")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.HasKey("InvoiceId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceDetails", (string)null);
                });

            modelBuilder.Entity("DentalManagement.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("UnitPrice")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7759),
                            ModifiedBy = "",
                            Name = "Khám và tư vấn",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 0m
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7761),
                            ModifiedBy = "",
                            Name = "Chụp phim",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 0m
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7764),
                            ModifiedBy = "",
                            Name = "Cạo vôi răng, đánh bóng răng",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 50000m
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7765),
                            ModifiedBy = "",
                            Name = "Nhổ răng cửa (số 1, số 2, số 3)",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 100000m
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7767),
                            ModifiedBy = "",
                            Name = "Nhổ răng cối nhỏ (số 4, số 5)",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 150000m
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7768),
                            ModifiedBy = "",
                            Name = "Nhổ răng cối lớn (số 6, số 7)",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 300000m
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7770),
                            ModifiedBy = "",
                            Name = "Nhổ răng khôn",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 400000m
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7771),
                            ModifiedBy = "",
                            Name = "Chữa răng - nội nha răng trẻ em",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 100000m
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7772),
                            ModifiedBy = "",
                            Name = "Chữa răng - nội nha răng cửa (số 1, số 2, số 3)",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 200000m
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7774),
                            ModifiedBy = "",
                            Name = "Chữa răng - nội nha răng cối nhỏ (số 4, số 5)",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 200000m
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7777),
                            ModifiedBy = "",
                            Name = "Chữa răng - nội nha răng cối lớn (số 6, số 7)",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 400000m
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7778),
                            ModifiedBy = "",
                            Name = "Tẩy trắng răng tại nhà",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 650000m
                        },
                        new
                        {
                            Id = 13,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7779),
                            ModifiedBy = "",
                            Name = "Tẩy trắng răng tại phòng khám",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 1400000m
                        },
                        new
                        {
                            Id = 14,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7781),
                            ModifiedBy = "",
                            Name = "Chỉnh nha",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 25000000m
                        },
                        new
                        {
                            Id = 15,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7782),
                            ModifiedBy = "",
                            Name = "Implant",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 24000000m
                        },
                        new
                        {
                            Id = 16,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7784),
                            ModifiedBy = "",
                            Name = "Răng sứ - Kim loại Mỹ",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 700000m
                        },
                        new
                        {
                            Id = 17,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7785),
                            ModifiedBy = "",
                            Name = "Răng sứ - Hợp kim Titan",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 1200000m
                        },
                        new
                        {
                            Id = 18,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7786),
                            ModifiedBy = "",
                            Name = "Răng sứ cao cấp - Zirconia",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 3000000m
                        },
                        new
                        {
                            Id = 19,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7788),
                            ModifiedBy = "",
                            Name = "Răng sứ cao cấp - DDBio",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 3500000m
                        },
                        new
                        {
                            Id = 20,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7789),
                            ModifiedBy = "",
                            Name = "Răng sứ cao cấp - Cercon HT",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 4000000m
                        },
                        new
                        {
                            Id = 21,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7791),
                            ModifiedBy = "",
                            Name = "Răng sứ cao cấp - Lava Plus",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 6000000m
                        },
                        new
                        {
                            Id = 22,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7792),
                            ModifiedBy = "",
                            Name = "Răng nhựa tháo lắp - Răng Việt Nam",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 150000m
                        },
                        new
                        {
                            Id = 23,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7794),
                            ModifiedBy = "",
                            Name = "Răng nhựa tháo lắp - Răng Nhật",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 200000m
                        },
                        new
                        {
                            Id = 24,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7795),
                            ModifiedBy = "",
                            Name = "Răng nhựa tháo lắp - Răng Ý",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 250000m
                        },
                        new
                        {
                            Id = 25,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7797),
                            ModifiedBy = "",
                            Name = "Răng nhựa tháo lắp - Hàm khung kim loại",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 1000000m
                        },
                        new
                        {
                            Id = 26,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7798),
                            ModifiedBy = "",
                            Name = "Răng nhựa tháo lắp - Nền dẻo",
                            ProductCategoryId = 1,
                            Status = 0,
                            UnitPrice = 800000m
                        });
                });

            modelBuilder.Entity("DentalManagement.Data.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7632),
                            ModifiedBy = "",
                            Name = "Dịch vụ nha khoa"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7643),
                            ModifiedBy = "",
                            Name = "Vật tư nha khoa"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2023, 3, 22, 19, 55, 29, 767, DateTimeKind.Local).AddTicks(7644),
                            ModifiedBy = "",
                            Name = "Khác"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("DentalManagement.Data.Entities.Invoice", b =>
                {
                    b.HasOne("DentalManagement.Data.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DentalManagement.Data.Entities.InvoiceDetail", b =>
                {
                    b.HasOne("DentalManagement.Data.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalManagement.Data.Entities.Product", "Product")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DentalManagement.Data.Entities.Product", b =>
                {
                    b.HasOne("DentalManagement.Data.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("DentalManagement.Data.Entities.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("DentalManagement.Data.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("DentalManagement.Data.Entities.Product", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("DentalManagement.Data.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
